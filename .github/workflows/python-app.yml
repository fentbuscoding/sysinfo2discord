# This workflow will install Python dependencies, run tests and lint with multiple Python versions
# Tests on multiple operating systems to ensure cross-platform compatibility
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: System Monitor - Cross Platform Tests

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff .
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: Type checking with mypy
      run: |
        mypy discord.py --ignore-missing-imports
        
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: lint
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        
    - name: Test import and basic functionality
      run: |
        python -c "import discord; print('Discord module imported successfully')"
        python -c "import psutil; print(f'psutil version: {psutil.__version__}')"
        python -c "import pypresence; print('pypresence imported successfully')"
        
    - name: Test cross-platform compatibility
      run: |
        python -c "
        import platform
        import discord
        print(f'Testing on: {platform.system()} {platform.release()}')
        print(f'Python: {platform.python_version()}')
        print(f'Architecture: {platform.architecture()[0]}')
        "
        
    - name: Run basic functionality tests
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        import discord
        
        # Test system info gathering
        sys_info = discord.get_system_info()
        print(f'System info: {sys_info}')
        
        # Test utility functions
        readable = discord.human_readable(1024*1024*1024)
        print(f'Human readable test: {readable}')
        
        # Test data gathering functions (without actually running them)
        print('All basic functions imported and accessible')
        "
        
    - name: Test argument parsing
      run: |
        python discord.py --help
        
    - name: Test with custom parameters (dry run)
      run: |
        timeout 10s python discord.py --rpc-update-interval 5 --discord-client-id "test" --show-os || true
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true
        
  build-artifact:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
    - name: Create distribution package
      run: |
        # Create a simple setup.py for packaging
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
            
        with open("requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]
        
        setup(
            name="sysinfo2discord",
            version="1.0.0",
            author="schoolbusgaming",
            description="Cross-platform system monitor with Discord Rich Presence",
            long_description=long_description,
            long_description_content_type="text/markdown",
            py_modules=["discord"],
            install_requires=requirements,
            python_requires=">=3.9",
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.12",
                "Topic :: System :: Monitoring",
                "Topic :: Communications :: Chat",
            ],
            entry_points={
                "console_scripts": [
                    "sysinfo2discord=discord:main",
                ],
            },
        )
        EOF
        
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        
  integration-test:
    name: Integration Test
    runs-on: ${{ matrix.os }}
    needs: build-artifact
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Install from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        
    - name: Test installed package
      run: |
        sysinfo2discord --help
        python -c "import discord; print('Package installed successfully')"
